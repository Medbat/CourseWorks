Курсовая работа делится на два связанных файла: Catalogue.h и FileSystem.h. В каталоге описаны структуры, которы определяют параметры файлов:
struct Attributes
{
	bool invisible;
	bool readOnly;
}
Эта структура содержит флаги скрытности и атрибута "только для чтения".
struct Param
{
	Long size; 
	int depth;
	string name;
	Attributes attributes;
}
Здесь описаны стандартные данные, такие как размер файла и его имя. Также здесь расположен служебный параметр, который вычисляется после создания иерархии ФС: глубина вложенности. Он используется для вывода и для определения некоторых ограничений. 
Обе структуры содержат конструкторы для упрощения создания элементов.
Далее идет класс Elem. Это класс предназначен для содержания элементов списка List, реализованного ниже. Он практически пустой: содержит лишь констркторы, необходимые для создания файлов и папок, служебные методы "геттеры" и один абсолютно виртуальный метод для вывода. 
От этого класса наследуются классы File и Directory - основа программы. Класс для файла содержит лишь конструкторы и перегрузку абсолютно виртуального метода вывода из класса Elem. Файл для директорий же, помимо этого, содержит ещё и список, содержащий другие файлы и папки, дополнительный метод для вывода, требующийся для отображения содержимого папки. Также методы добавления элементов в список этой директории: по одному или по фиксированному указанному количеству, что иногда бывает удобно. Ещё класс содержит метод для вычисления "глубин" файлов и каталогов, а также небольшой интерфейс для этого метода.
Класс Iter создан для удобной навигации внутри списка. В нем реализован конструктор по умолчанию и методы и перегруженные операторы для написания подобных вещей:
for (Iter i = begin(); i != end(); ++i) 
Класс List является "внутренностью" класса Directory и содержит в себе методы задания итераторов, вставки/удаления элементов из списка, определения количества элементов внутри списка, а также служебный метод, возвращающий ссылку на первый элемент.

Заголовочный файл FileSystem.h, в свою очередь, содержит обширный набор классов, совершающих проверку и анализ файловой системы.
Класс FileCheck является базовым классом для двух других классов проверок ФС семейств Windows и UNIX. Задание файла для проверки происходит при помощи указания в констукторе ссылки на класс File или приравнивание к этому указателю класса. Таким образом, для каждого сета проверок достаточно иметь один экземпляр тестирующего класса.
В классе реализованы простые проверки на скрытость и RO файла. 

Класс DirectoryCheck является базовым для AttributeCheck и DVDDirectoryCheck. Первый ищет количество скрытых/RO файлов, второй определяет, можно ли записать каталог и все вложенные в него файлы/каталоги на DVD-диск.

Об ограничениях, проверяемых в этих классах, подробнее написано во вступлении.

К заимствованным классам длинной арифметики были добавлены следующие методы и функции:

	Long involution(long);	
Вовзведение длинного числа в степень. Степень указывается в параметрах метода, сам метод возвращает результат и записывает его в текущем объекте.


	bool empty();
Возвращает истину, если число в объекте равно 0.


	Long assign(Long &l, string b)
Дружественная функция, переводит число в строке string в длинное число Long. Возвращает объект l.


	Long& operator*(const Long& a, string b)
Дружественная функция для умножения длинного числа на число из строки.
	
	bool operator>(const Long& a, string b)
Перегруженный оператор сравнения для длинного числа и строки.